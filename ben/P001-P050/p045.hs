{-
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
-}

main = print . head . dropWhile (<= 40755) $ generateNbs

generateNbs :: [Int]
generateNbs = [x | x <- triangle, 
                   isPenta x, 
                   isHexa x] 

triangle :: [Int]
triangle = scanl (+) 1 [2..]

isPenta :: Int -> Bool
isPenta nb = (isInt n1)
    where (n1, n2) = twoDegreeEqSol 3 (-1) (fromIntegral (- 2*nb))

isHexa :: Int -> Bool
isHexa nb = (isInt n1)
    where (n1, n2) = twoDegreeEqSol 2 (-1) (fromIntegral (-nb))

-- a -> b -> c 
-- a^2*x + b*x + c -> (x1,x2)
twoDegreeEqSol :: Floating a => a -> a -> a -> (a, a)
twoDegreeEqSol a b c = (x1,x2)
    where d = b^2 -4*a*c
          x1 = (-b + sqrt d) / (2*a)
          x2 = (-b - sqrt d) / (2*a)

isInt :: RealFrac a => a -> Bool 
isInt nb = nb == fromInteger (round nb)
