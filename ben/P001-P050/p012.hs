{-
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
-}

import Data.List
import Data.Ord

main = print . head . dropWhile (\(a,b) -> b <= 500) . map (findNbDivisors) $ triNumbers

findNbDivisors :: Int -> (Int,Int)
findNbDivisors nb = (nb, amount)
    where amount = product . map (\ x -> length x + 1) . group $ primes
          primes = primeFactorisation nb

findSmallestDivisor :: Int -> Int -> Int
findSmallestDivisor start nb 
    | mod nb start == 0 = start
    | start > round (sqrt (fromIntegral nb)) = nb
    | otherwise = findSmallestDivisor (start + 1) nb

primeFactorisation :: Int -> [Int]
primeFactorisation nb 
    | smallest == nb = [smallest]
    | otherwise = smallest : (primeFactorisation (div nb smallest)) 
    where smallest = findSmallestDivisor 2 nb

triNumbers :: [Int]
triNumbers = scanl (+) 1 [2..]
